---
- name: Find NAT instances and terminate them
  hosts: tag_Name_NAT:&tag_env_{{ env | default("production") }}
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  roles:
    - terminate

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  - group_vars/envs/{{ env | default("production") }}/vpc.yaml
  - group_vars/envs/{{ env | default("production") }}/etcd.yaml
  - group_vars/envs/{{ env | default("production") }}/nat.yaml
  - group_vars/envs/{{ env | default("production") }}/coreos.yaml
  tasks:

  # delete influxdb volume
  - name: Find influxdb volume
    shell: "aws ec2 describe-volumes --filter 'Name=tag:Name,Values={{ influxdb_volume.name }}' --output json"
    register: influxdb_volume_out
  - set_fact:
      influxdb_volume_info: "{{ influxdb_volume_out.stdout | from_json }}"
  - fail:
      msg: "Expected no more than 1 influxdb volumes, found {{ influxdb_volume_info.Volumes | length }}"
    when: "{{ influxdb_volume_info.Volumes | length }} > 1"

  - name: Detach influxdb volume (forced)
    shell: "aws ec2 detach-volume --volume-id {{ influxdb_volume_info.Volumes[0].VolumeId }} --force"
    when: "{{ influxdb_volume_info | is_volume_used }}"
  - name: Delete influxdb volume
    ec2_vol:
      id: "{{ influxdb_volume_info.Volumes[0].VolumeId }}"
      region: "{{ ec2_region }}"
      state: absent
    when: "{{ influxdb_volume_info.Volumes | length }} == 1"
    retries: 5
    delay: 10

  # delete rabbitmq_master volume
  - name: Find rabbitmq_master volume
    shell: "aws ec2 describe-volumes --filter 'Name=tag:Name,Values={{ rabbitmq_master_volume.name }}' --output json"
    register: rabbitmq_master_volume_out
  - set_fact:
      rabbitmq_master_volume_info: "{{ rabbitmq_master_volume_out.stdout | from_json }}"
  - fail:
      msg: "Expected no more than 1 rabbitmq_master volumes, found {{ rabbitmq_master_volume_info.Volumes | length }}"
    when: "{{ rabbitmq_master_volume_info.Volumes | length }} > 1"

  - name: Detach rabbitmq_master volume (forced)
    shell: "aws ec2 detach-volume --volume-id {{ rabbitmq_master_volume_info.Volumes[0].VolumeId }} --force"
    when: "{{ rabbitmq_master_volume_info | is_volume_used }}"
  - name: Delete rabbitmq_master volume
    ec2_vol:
      id: "{{ rabbitmq_master_volume_info.Volumes[0].VolumeId }}"
      region: "{{ ec2_region }}"
      state: absent
    when: "{{ rabbitmq_master_volume_info.Volumes | length }} == 1"
    retries: 5
    delay: 10

  # delete result_processing volume
  - name: Find result_processing volume
    shell: "aws ec2 describe-volumes --filter 'Name=tag:Name,Values={{ result_processing_volume.name }}' --output json"
    register: result_processing_volume_out
  - set_fact:
      result_processing_volume_info: "{{ result_processing_volume_out.stdout | from_json }}"
  - fail:
      msg: "Expected no more than 1 result_processing volumes, found {{ result_processing_volume_info.Volumes | length }}"
    when: "{{ result_processing_volume_info.Volumes | length }} > 1"

  - name: Detach result_processing volume (forced)
    shell: "aws ec2 detach-volume --volume-id {{ result_processing_volume_info.Volumes[0].VolumeId }} --force"
    when: "{{ result_processing_volume_info | is_volume_used }}"
  - name: Delete result_processing volume
    ec2_vol:
      id: "{{ result_processing_volume_info.Volumes[0].VolumeId }}"
      region: "{{ ec2_region }}"
      state: absent
    when: "{{ result_processing_volume_info.Volumes | length }} == 1"
    retries: 5
    delay: 10

  - name: remove autoscale groups for coreos and etcd
    ec2_asg:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      launch_config_name: "{{ item.lc_name }}"
      state: absent
    with_items:
      - { name: "{{ etcd_asg_name }}", lc_name: "{{ etcd_lc_name }}" }
      - { name: "{{ coreos_asg_name }}", lc_name: "{{ coreos_lc_name }}" }

  - name: remove launch configurations for coreos and etcd
    ec2_lc:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      instance_type: "{{ item.type }}"
      state: absent
    with_items:
      - { name: "{{ etcd_lc_name }}", type: "{{ etcd_instance_type }}" }
      - { name: "{{ coreos_lc_name }}", type: "{{ coreos_instance_type }}" }

  # find vpc id
  - name: find vpc id
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      subnets: "{{ vpc_subnets }}"
      wait: true
    register: vpc

  # disassociate VPC from Bastion DNS
  - name: discover DNS zone
    local_action: "command aws route53 list-hosted-zones-by-name --dns-name {{ vpc_dns_zone }} --max-items 2 --output json"
    register: list_zones_result_out
  - set_fact:
      dns_zone: "{{ list_zones_result_out.stdout | from_json | get_dns_zone(vpc_dns_zone + '.') }}"
  - name: Check DNS zone existence
    fail:
      msg: "Expected DNS zone was not found"
    when: dns_zone == ""
  - name: disassociate VPC from Bastion DNS zone
    local_action: "command aws route53 disassociate-vpc-from-hosted-zone --hosted-zone-id {{ dns_zone.Id }} --vpc VPCRegion={{ ec2_region }},VPCId={{ vpc.vpc_id }} --output json"
    ignore_errors: yes

  # delete public subdomain recordset in route53 gaiahub.io hosted zone
  - name: obtain alias hosted zone id
    set_fact:
      id: "{{ hz_ids | get_hosted_zone_id() }}"
  - name: get ELB details
    local_action: command aws elb describe-load-balancers --load-balancer-names coreos-elb-dev --max-items 1 --output json
    register: elb_fact_out
    ignore_errors: yes
  - name: prepare ELB fact
    set_fact:
      elb_fact: "{{ elb_fact_out.stdout }}"
  - name: delete route53 subdomain for environment
    route53:
      command: delete
      zone:  gaiahub.io
      record: "{{ dns }}.gaiahub.io"
      type: A
      alias: True
      alias_hosted_zone_id: "{{ id }}"
      value: "dualstack.{{ elb_fact.LoadBalancerDescriptions[0].CanonicalHostedZoneName }}"
    when: elb_fact != ""
    ignore_errors: yes    

  # delete coreos ELB
  - name: delete coreos ELB
    ec2_elb_lb:
      name: "{{ coreos_elb_name }}"
      state: absent
      region: "{{ ec2_region }}"
    ignore_errors: yes

  - name: check if ELB deletion is not completed yet
    local_action: command aws elb describe-load-balancers --load-balancer-names coreos-elb-dev --max-items 1 --output json
    register: checkElb
    ignore_errors: yes
    until: checkElb.stdout == ""
    retries: 5
    delay: 10

  # delete ELB self-signed certificate
  - name: delete self-signed certificate for ELB
    local_action: command aws iam delete-server-certificate --server-certificate-name ELB_Certificate.{{ ec2_region }}
    ignore_errors: yes

  - name: delete all vpc security groups
    ec2_group:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
    with_items:
      - { name: "{{ nat_security_group.name }}", description: "{{ nat_security_group.desc }}"}
      - { name: "{{ etcd_security_group.name }}" , description: "{{ etcd_security_group.desc }}"}
      - { name: "{{ coreos_security_group.name }}", description: "{{ coreos_security_group.desc }}"}
      - { name: "{{ elb_security_group.name }}", description: "{{ elb_security_group.desc }}"}
    ignore_errors: yes
    retries: 5
    delay: 10

  - name: delete vpc peering
    ec2_vpc_peering:
      source_vpc: "{{ bastion_vpc_cidr_block }}"
      dest_vpc: "{{ vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      state: absent
    ignore_errors: yes

  - name: delete VPC
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
    ignore_errors: yes

  - name: get bastion vpc route table
    ec2_vpc_route_table_facts:
      region: "{{ ec2_region }}"
      filters:
        tag:Name: "{{ bastion_vpc_rt_name }}"
        tag:env: "{{ env | default('production') }}"
    register: bastion_rts
    
  - name: delete route from bastion route tables
    local_action: command aws ec2 delete-route --route-table-id {{ item.id }} --destination-cidr-block {{ vpc_cidr_block }}
    with_items: "{{ bastion_rts.route_tables }}"
    when: bastion_rts != "" 
    ignore_errors: true
