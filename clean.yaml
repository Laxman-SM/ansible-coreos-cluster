---
- name: Find NAT instances and terminate them
  hosts: tag_Name_NAT:&tag_env_{{ env | default("production") }}
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  roles:
    - terminate

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  - group_vars/envs/{{ env | default("production") }}/vpc.yaml
  - group_vars/envs/{{ env | default("production") }}/etcd.yaml
  - group_vars/envs/{{ env | default("production") }}/nat.yaml
  - group_vars/envs/{{ env | default("production") }}/coreos.yaml
  tasks:
  - name: remove autoscale groups for coreos and etcd
    ec2_asg:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      launch_config_name: "{{ item.lc_name }}"
      state: absent
    with_items:
      - { name: "{{ etcd_asg_name }}", lc_name: "{{ etcd_lc_name }}" }
      - { name: "{{ coreos_asg_name }}", lc_name: "{{ coreos_lc_name }}" }

  - name: remove launch configurations for coreos and etcd
    ec2_lc:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      instance_type: "{{ item.type }}"
      state: absent
    with_items:
      - { name: "{{ etcd_lc_name }}", type: "{{ etcd_instance_type }}" }
      - { name: "{{ coreos_lc_name }}", type: "{{ coreos_instance_type }}" }

  # find vpc id
  - name: find vpc id
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      subnets: "{{ vpc_subnets }}"
      wait: true
    register: vpc

  - name: delete all vpc security groups
    ec2_group:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
    with_items:
      - { name: "{{ etcd_security_group.name }}" , description: "{{ etcd_security_group.desc }}"}
      - { name: "{{ coreos_security_group.name }}", description: "{{ coreos_security_group.desc }}"}

  - name: delete VPC
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
