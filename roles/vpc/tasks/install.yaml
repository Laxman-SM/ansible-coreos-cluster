---
# Fail if DNS hosted zone does not exist for VPC
- name: check DNS zone existence
  fail:
    msg: "Expected DNS zone '{{ vpc_dns_zone }}' was not found. Run Bastion playbooks first!"
  when: (dns_zone.HostedZones|length == 0) or (dns_zone.HostedZones[0].Name != vpc_dns_zone_with_dot)

# create new VPC
- name: create a new VPC
  ec2_vpc:
    region: "{{ ec2_region }}"
    cidr_block: "{{ vpc_cidr_block }}"
    resource_tags: "{{ vpc_resource_tags }}"
    internet_gateway: "{{ vpc_internet_gateway|string }}"
    subnets: "{{ vpc_subnets }}"
    dns_hostnames: true
    dns_support: true
    wait: true
  register: ec2_vpc_out

# Create DHCP options set - register Route53 as private DNS server for VPC
- name: create DHCP options set
  ec2_vpc_dhcp_options:
    region: "{{ ec2_region }}"
    tags: "{{ dhcp_opts_tags }}"
    domain_name: "{{ vpc_dns_zone }}"
    dns_servers: AmazonProvidedDNS
    vpc_id: "{{ ec2_vpc_out.vpc_id }}"
    state: present
  register: dhcp_opts


# associate new VPC with Bastion DNS zone
- name: associate Gaia VPC with Bastion DNS zone
  shell: "aws route53 associate-vpc-with-hosted-zone --vpc VPCRegion={{ ec2_region }},VPCId={{ ec2_vpc_out.vpc_id }} --hosted-zone-id {{ dns_zone.HostedZones[0].Id }}"
  register: zone_vpc_association
  failed_when: zone_vpc_association.rc != 0 and "ConflictingDomainExists" not in zone_vpc_association.stderr
  changed_when: zone_vpc_association.rc == 0

# get VPC facts: id, private and public subnets
- name: get VPC facts - id, public and private sub
  set_fact:
    vpc_id: "{{ ec2_vpc_out.vpc_id }}"
    vpc_private_subnets: "{{ ec2_vpc_out.subnets | get_subnets('tier', 'private') }}"
    vpc_public_subnets: "{{ ec2_vpc_out.subnets | get_subnets('tier', 'public') }}"
    vpc_public_subnets_full: "{{ ec2_vpc_out.subnets | get_subnets_full('tier', 'public') }}"
    vpc_private_subnets_full: "{{ ec2_vpc_out.subnets | get_subnets_full('tier', 'private') }}"
