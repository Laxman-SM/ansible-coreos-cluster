---

- name: Create the security group for the {{cluster_type}} cluster
  ec2_group:
    name: "{{ security_group[cluster_type].name }}"
    description: "{{ security_group[cluster_type].desc }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ security_group[cluster_type].rules }}"
  register: _sg

- name: keep created security group in dictionary
  set_fact:
    sg_type_id: "{{ sg_type_id|default({}) | combine( {cluster_type: _sg.group_id} ) }}"
- debug: var=sg_type_id

# generate user-data from template
- name: load user-data content
  set_fact:
    user_data: "{{ lookup('template', user_data_template[cluster_type]) }}"

# create new name for (potentially) updated LC
- name: create new LC name [prefix + random (1..9999)]
  set_fact:
    _lc_name: "{{ lc_name[cluster_type] + 9999|random|string }}"

# get all LC within current region with name prefix
- name: find all "{{ lc_name[cluster_type] }}" launch configurations in the region
  ec2_lc_find:
    name_regex: "{{ lc_name[cluster_type] + '*' }}"
    region: "{{ ec2_region }}"
  register: _lcs

- name: check image id
  debug: msg="{{_lcs.results[0].image_id == coreos_ami.ami_id}}"
  when: _lcs.results|length > 0

- name: check user-data
  debug: msg="{{(_lcs.results[0].user_data | b64decode) == user_data}}"
  when: _lcs.results|length > 0

- name: check instance type
  debug: msg="{{_lcs.results[0].instance_type == instance_type[cluster_type][environ]}}"
  when: _lcs.results|length > 0

- name: check keypair
  debug: msg="{{_lcs.results[0].keyname == keypair_name[cluster_type]}}"
  when: _lcs.results|length > 0


# check if update/create is required, only if some check is different
- name: init update flag to true
  set_fact:
    _update_lc: true
- name: check if LC update is required
  set_fact:
    _update_lc: false
  when:
    # if there are LC
    - _lcs.results|length > 0
    # and same image id
    - _lcs.results[0].image_id == coreos_ami.ami_id
    # and same user_data
    - (_lcs.results[0].user_data | b64decode) == user_data
    # and same instance type
    - _lcs.results[0].instance_type == instance_type[cluster_type][environ]
    # and same key name
    - _lcs.results[0].keyname == keypair_name[cluster_type]

# create launch configuration, if needed
- name: create new "{{ cluster_type }}" LC
  ec2_lc:
    name: "{{ _lc_name }}"
    region: "{{ ec2_region }}"
    key_name: "{{ keypair_name[cluster_type] }}"
    image_id: "{{ coreos_ami.ami_id }}"
    security_groups: ["{{ _sg.group_id }}"]
    instance_type: "{{ instance_type[cluster_type][environ] }}"
    instance_profile_name: "{{ instance_profile_name[cluster_type] }}"
    assign_public_ip: false
    instance_monitoring: true
    user_data: "{{ user_data }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: "{{ volume_size[cluster_type][environ] }}"
        delete_on_termination: true
      - device_name: /dev/xvdb
        volume_type: gp2
        volume_size: 8
        delete_on_termination: true
  register: _lc
  when: _update_lc

# create etcd autoscale group (with load_balancers)
- name: create "{{ cluster_type }}" autoscale group (with load_balancers)
  ec2_asg:
    name: "{{ asg_name[cluster_type] }}"
    region: "{{ ec2_region }}"
    launch_config_name: "{{ _lc_name }}"
    load_balancers: "{{ load_balancers[cluster_type] }}"
    health_check_period: "{{ health_check_period[cluster_type] }}"
    desired_capacity: "{{ cluster_size_desired_capacity[cluster_type] }}"
    min_size: "{{ cluster_min_size[cluster_type] }}"
    max_size: "{{ cluster_max_size[cluster_type] }}"
    tags: "{{ instance_tags[cluster_type] }}"
    vpc_zone_identifier: "{{ vpc_private_subnets }}"
    replace_all_instances: yes
    replace_batch_size: 1
    wait_for_instances: true
    wait_timeout: 600
  register: _asg
  when:
    - _update_lc
    - load_balancers[cluster_type] | length > 0

# create etcd autoscale group (without load_balancers)
- name: create "{{ cluster_type }}" autoscale group (without load_balancers)
  ec2_asg:
    name: "{{ asg_name[cluster_type] }}"
    region: "{{ ec2_region }}"
    launch_config_name: "{{ _lc_name }}"
    health_check_period: "{{ health_check_period[cluster_type] }}"
    desired_capacity: "{{ cluster_size_desired_capacity[cluster_type] }}"
    min_size: "{{ cluster_min_size[cluster_type] }}"
    max_size: "{{ cluster_max_size[cluster_type] }}"
    tags: "{{ instance_tags[cluster_type] }}"
    vpc_zone_identifier: "{{ vpc_private_subnets }}"
    replace_all_instances: yes
    replace_batch_size: 1
    wait_for_instances: true
    wait_timeout: 600
  register: _asg
  when:
    - _update_lc
    - load_balancers[cluster_type] | length == 0

# delete old LC if updated
- name: delete old LC
  ec2_lc:
    name: "{{ item.name }}"
    instance_type: "{{ item.instance_type }}"
    state: absent
  with_items: "{{ _lcs.results }}"
  when: _update_lc

# get all instances for the autoscale group
- name: get all instances for '{{ asg_name[cluster_type] }}' autoscale group with source_dest_check=true
  ec2_remote_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: "running"
      source-dest-check: "true"
      tag:aws:autoscaling:groupName: "{{ asg_name[cluster_type] }}"
  register: _asg_instances

# turn off source destination check
- name: turn off "source destination check" - needed for flannel
  shell: "aws ec2 modify-instance-attribute --region {{ ec2_region }} --instance-id {{ item.id }} --no-source-dest-check"
  register: _result
  failed_when: _result.rc != 0
  changed_when: _result.rc == 0
  with_items: "{{ _asg_instances.instances | default({}) }}"
