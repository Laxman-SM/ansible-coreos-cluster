- debug: var=vpc_id

# set facts with file content for cloud-config
- set_fact:
    gaia_ca_crt_file: "keys/{{ gaia_ca_file }}.crt"
- stat:
    path: "{{ gaia_ca_crt_file }}"
  register: st_out
- fail:
    msg: "Missing {{ gaia_ca_crt_file }} file. Please copy this file from ansible-bastion or make the keys directory a symlink"
  when: st_out.stat.exists != True
- shell: "base64 -w0 {{ gaia_ca_crt_file }}"
  register: gaia_ca_crt_content_out
- set_fact:
    gaia_ca_crt_content: "{{ gaia_ca_crt_content_out.stdout }}"

- name: Create the security group for the CoreOS cluster
  ec2_group:
    name: "{{ coreos_security_group.name }}"
    description: "{{ coreos_security_group.desc }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ coreos_security_group.rules }}"
  register: coreos_sg

# generate user-data from template
- name: create template
  template: src='user-data.j2' dest='/tmp/user-data.txt'
- name: load user-data content
  set_fact:
    # user_data: "{{ lookup('file', '/tmp/user-data.txt') | b64encode }}" <-- base64 encoded user-data is not recognized by CoreOS
    user_data: "{{ lookup('file', '/tmp/user-data.txt') }}"

# search for latest CoreOS AMI from alpha/beta/stable channel
- name: search for the latest CoreOS AMI image from "{{ coreos_channel }}"
  ec2_ami_find:
    region: "{{ ec2_region }}"
    name: "CoreOS-{{coreos_channel}}-{{coreos_version}}-hvm"
    virtualization_type: hvm
    sort: name
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: find_out
- name: get CoreOS AMI
  set_fact:
    coreos_ami: "{{ find_out.results[0] }}"

# create CoreOS launch configuration
# note: for flannel use manually create role with required pilicies
#       https://coreos.com/flannel/docs/latest/vpc-backend.html
- name: create CoreOS launch configuration
  ec2_lc:
    name: "{{ coreos_lc_name }}"
    region: "{{ ec2_region }}"
    key_name: "{{ coreos_keypair_name }}"
    image_id: "{{ coreos_ami.ami_id }}"
    security_groups: "{{ coreos_sg.group_id }}"
    instance_type: "{{ coreos_instance_type }}"
    instance_profile_name: "{{ coreos_instance_profile }}"
    user_data: "{{ user_data }}"

# create CoreOS autoscale group
- name: create CoreOS autoscale group
  ec2_asg:
    name: "{{ coreos_asg_name }}"
    region: "{{ ec2_region }}"
    launch_config_name: "{{ coreos_lc_name }}"
    health_check_period: "{{ coreos_health_check_period }}"
    desired_capacity: "{{ coreos_cluster_size }}"
    min_size: "{{ coreos_cluster_size }}"
    max_size: "{{ coreos_max_cluster_size }}"
    tags: "{{ coreos_instance_tags }}"
    vpc_zone_identifier: "{{ vpc_private_subnets }}"
    wait_for_instances: yes
  register: asg_out

- name: Turn off "source destination check" - needed for flunnel
  local_action: command aws ec2 modify-instance-attribute --region {{ ec2_region }} --instance-id {{ item }} --no-source-dest-check
  with_items: "{{ asg_out.instances }}"
