---

- name: Create the security group for the etcd cluster
  ec2_group:
    name: "{{ etcd_security_group.name }}"
    description: "{{ etcd_security_group.desc }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ etcd_security_group.rules }}"
  register: etcd_sg

- set_fact:
    etcd_discovery_url: "{{ lookup('pipe', 'curl -s https://discovery.etcd.io/new?size='+item) }}"
  with_items:
    - "{{etcd_cluster_size}}"

# generate user-data from template
- name: load user-data content
  set_fact:
    user_data: "{{ lookup('template', 'user-data.j2') }}"

# create new name for (potentially) updated LC
- name: create new LC name [prefix + random (1..9999)]
  set_fact:
    _lc_name: "{{ etcd_lc_name + 9999|random|string }}"

# get all LC within current region with name prefix
- name: find all "{{ etcd_lc_name }}" launch configurations in the region
  ec2_lc_find:
    name_regex: "{{ etcd_lc_name + '*' }}"
    region: "{{ ec2_region }}"
  register: _lcs

# check if update/create is required, only if some check is different
- name: init update flag to true
  set_fact:
    _update_lc: true
- name: check if LC update is required
  set_fact:
    _update_lc: false
  when:
    # if there are LC
    - _lcs.results|length > 0
    # and same image id
    - _lcs.results[0].image_id == coreos_ami.ami_id
    # and same user_data
    - (_lcs.results[0].user_data | b64decode) == user_data
    # and same instance type
    - _lcs.results[0].instance_type == etcd_instance_type
    # and same key name
    - _lcs.results[0].keyname == etcd_keypair_name

# create launch configuration, if needed
- name: create new LC
  ec2_lc:
    name: "{{ _lc_name }}"
    region: "{{ ec2_region }}"
    key_name: "{{ etcd_keypair_name }}"
    image_id: "{{ coreos_ami.ami_id }}"
    security_groups: ["{{ etcd_sg.group_id }}"]
    instance_type: "{{ etcd_instance_type }}"
    assign_public_ip: false
    instance_monitoring: true
    user_data: "{{ user_data }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: standard
        volume_size: "{{ volume_size.etcd[environ] }}"
        delete_on_termination: true
  register: _lc
  when: _update_lc

# create etcd autoscale group
- name: create etcd autoscale group
  ec2_asg:
    name: "{{ etcd_asg_name }}"
    region: "{{ ec2_region }}"
    launch_config_name: "{{ _lc_name }}"
    health_check_period: "{{ etcd_health_check_period }}"
    desired_capacity: "{{ etcd_cluster_size }}"
    min_size: "{{ etcd_cluster_size }}"
    max_size: "{{ etcd_max_cluster_size }}"
    tags: "{{ etcd_instance_tags }}"
    vpc_zone_identifier: "{{ vpc_private_subnets }}"
    replace_all_instances: yes
    replace_batch_size: 1
    wait_for_instances: true
    wait_timeout: 600
  when: _update_lc

# delete old LC if updated
- name: delete old LC
  ec2_lc:
    name: "{{ item.name }}"
    instance_type: "{{ item.instance_type }}"
    state: absent
  with_items: "{{ _lcs.results }}"
  when: _update_lc
