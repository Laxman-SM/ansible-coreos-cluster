- debug: var=vpc_id

# Security group for RDS
- name: Create the security group for RDS
  ec2_group:
    name: "{{ rds_security_group.name }}"
    description: "{{ rds_security_group.desc }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ ec2_region }}"
    rules: "{{ rds_security_group.rules }}"
  register: rds_sg
- name: Print RDS security group details
  debug: var=rds_sg

# Subnet for RDS
- name: Find subnet for RDS
  shell: "aws ec2 describe-subnets --filters Name=tag:Name,Values=private-1"
  register: private1_subnet_out
- set_fact:
    private1_subnet: "{{ private1_subnet_out.stdout | from_json }}"
- set_fact:
    zone_rds: "{{ private1_subnet.Subnets[0].AvailabilityZone }}"
#- set_fact:
#    subnet_rds: "{{ private1_subnet.Subnets[0].SubnetId }}"
#- debug: var=zone_rds
#- debug: var=subnet_rds

# Create DB subnet group from all private subnets in the region
# Dataset is based on ec2_vpc_out so that only looks on the relevant VPC
- name: Create RDS subnet group
  rds_subnet_group:
    region: "{{ ec2_region }}"
    state: present
    name: "postgres-{{ environ }}-{{ dns }}-subnet-group"
    description: See the group name
    subnets: "{{ ec2_vpc_out.subnets | get_subnets('tier', 'private') }}"

- name: create Postgres for production environment
  rds:
    command: create
    db_engine: postgres
    size: "{{ volume_size.rds[environ] }}"
    iops: "{{ iops[environ] }}"
    instance_type: "{{ instance_type.rds[environ] }}"
    instance_name: "{{ postgres_name }}"
    username: dex
    password: dex_pass
    db_name: dex_db
    backup_retention: "{{ backup_retention[environ] }}"
    engine_version: "{{ postgres_version }}"
    upgrade: no
    multi_zone: yes
    publicly_accessible: no
    region: "{{ ec2_region }}"
    subnet: "postgres-{{ environ }}-{{ dns }}-subnet-group"
    vpc_security_groups: "{{ rds_sg.group_id }}"
    wait: no
    tags:
      Environment: "{{ environ }}"
  register: rds
  when: environ=="production"

- name: create Postgres for develop environment
  rds:
    command: create
    db_engine: postgres
    size: "{{ volume_size.rds[environ] }}"
    instance_type: "{{ instance_type.rds[environ] }}"
    instance_name: "{{ postgres_name }}"
    username: dex
    password: dex_pass
    db_name: dex_db
    backup_retention: "{{ backup_retention[environ] }}"
    engine_version: "{{ postgres_version }}"
    upgrade: no
    multi_zone: no
    publicly_accessible: no
    region: "{{ ec2_region }}"
    zone: "{{ zone_rds }}"
    subnet: "postgres-{{ environ }}-{{ dns }}-subnet-group"
    vpc_security_groups: "{{ rds_sg.group_id }}"
    wait: no
    tags:
      Environment: "{{ environ }}"
  register: rds
  when: environ=="develop"

# Check if DB creation has started (availability is checked later)
- name: check Postgres existence
  rds:
    command: facts
    instance_name: "{{ postgres_name }}"
    region: "{{ ec2_region }}"
  register: dbf
  ignore_errors: yes
  until: dbf|success
  retries: 6
  delay: 10
